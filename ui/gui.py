import pygame
import os

class GUI:
    def __init__(self, screen, board, player_is_white):
        self.screen = screen
        self.board = board
        self.tile_size = 75  # K√≠ch th∆∞·ªõc m·ªói √¥ c·ªù
        self.piece_images = {}
        self.player_is_white = player_is_white  # is_flipped: True n·∫øu ng∆∞·ªùi ch∆°i ƒëang ·ªü ph√≠a tr√™n (c·∫ßm qu√¢n ƒëen), ƒë·ªÉ l·∫≠t b√†n c·ªù xu·ªëng d∆∞·ªõ
        self.load_images()
        self.last_move = None

    def load_images(self):
        """
        T·∫£i ·∫£nh c√°c qu√¢n c·ªù t·ª´ th∆∞ m·ª•c 'assets'.
        ƒê·∫∑t t√™n theo d·∫°ng: whitepawn.png, blackqueen.png,...
        """
        pieces = ['pawn', 'rook', 'knight', 'bishop', 'queen', 'king']
        colors = ['white', 'black']
        for color in colors:
            for piece in pieces:
                path = os.path.join("assets", f"{color}{piece}.png")
                try:
                    image = pygame.image.load(path).convert_alpha()
                    image = pygame.transform.scale(image, (self.tile_size, self.tile_size))
                    self.piece_images[f"{color}{piece}"] = image
                except Exception as e:
                    print(f"Error loading {path}: {e}")
    
    def gui_coords(self, row):
        """
        Chuy·ªÉn row b√†n c·ªù (0‚Äì7) th√†nh v·ªã tr√≠ ƒë·ªÉ v·∫Ω GUI.
        N·∫øu is_flipped=True (ng∆∞·ªùi ch∆°i c·∫ßm ƒëen) ‚Üí ƒë·∫£o chi·ªÅu v·∫Ω
        """
        return (7 - row) if self.player_is_white else row

    def draw_board(self):
        """
        V·∫Ω b√†n c·ªù 8x8, tr·∫Øng v√† ƒëen xen k·∫Ω.
        Sau khi v·∫Ω t·ª´ng √¥ ‚Üí v·∫Ω th√™m vi·ªÅn ƒëen m·ªèng.
        """
        colors = [(240, 217, 181), (181, 136, 99)]  # M√†u s√°ng v√† t·ªëi
        for row in range(8):
            for col in range(8):
                draw_row = 7 - row  # ‚úÖ ƒê·∫£o h√†ng ƒë·ªÉ v·∫Ω t·ª´ d∆∞·ªõi l√™n
                color = colors[(row + col) % 2]
                rect = pygame.Rect(col * self.tile_size, draw_row * self.tile_size, self.tile_size, self.tile_size)

                # V·∫Ω √¥ n·ªÅn
                pygame.draw.rect(self.screen, color, rect)

    def highlight_last_move(self):
        if not self.last_move:
            return

        from_row, from_col, to_row, to_col = self.last_move
        highlight_color = (255, 255, 153)

        for row, col in [(from_row, from_col), (to_row, to_col)]:
            draw_row = self.gui_coords(row)
            x = col * self.tile_size
            y = draw_row * self.tile_size

            # T·∫°o 1 surface trong su·ªët ƒë·ªÉ v·∫Ω highlight m·ªù
            highlight_surface = pygame.Surface((self.tile_size, self.tile_size))
            highlight_surface.set_alpha(100)  # ƒê·ªô m·ªù (0 l√† trong su·ªët, 255 l√† ƒë·∫≠m)
            highlight_surface.fill(highlight_color)

            self.screen.blit(highlight_surface, (x, y))

    def draw_pieces(self):
        """
        D·ª±a tr√™n board.positions ƒë·ªÉ v·∫Ω qu√¢n c·ªù ƒë√∫ng v·ªã tr√≠.
        """
        for position, piece_info in self.board.positions.items():
            color, piece = piece_info
            image = self.piece_images.get(f"{color}{piece}")
            if image:
                row, col = position
                draw_row = self.gui_coords(row)  # ‚úÖ ƒê·∫£o h√†ng ƒë·ªÉ v·∫Ω ƒë√∫ng chi·ªÅu
                x = col * self.tile_size + (self.tile_size - image.get_width()) // 2
                y = draw_row * self.tile_size + (self.tile_size - image.get_height()) // 2
                self.screen.blit(image, (x, y))

    def draw_highlights(self, squares):
        """
        V·∫Ω c√°c √¥ n∆∞·ªõc ƒëi h·ª£p l·ªá:
        - Ch·∫•m tr√≤n nh·ªè n·∫øu l√† √¥ tr·ªëng
        - V√≤ng tr√≤n n·∫øu l√† √¥ c√≥ qu√¢n ƒë·ªãch
        """
        for row, col in squares:
            draw_row = self.gui_coords(row) # ‚úÖ ƒê·∫£o h√†ng
            center_x = col * self.tile_size + self.tile_size // 2
            center_y = draw_row * self.tile_size + self.tile_size // 2

            target_piece = self.board.positions.get((row, col))

            if target_piece is None:
                # N∆∞·ªõc ƒëi b√¨nh th∆∞·ªùng ‚Üí ch·∫•m nh·ªè
                pygame.draw.circle(
                    self.screen,
                    (160, 160, 160),
                    (center_x, center_y),
                    self.tile_size // 8
                )
            else:
                # C√≥ qu√¢n ƒë·ªãch ‚Üí v√≤ng tr√≤n
                pygame.draw.circle(
                    self.screen,
                    (160, 160, 160),
                    (center_x, center_y),
                    self.tile_size // 2 - 5,
                    4  # ƒë·ªô d√†y ƒë∆∞·ªùng vi·ªÅn
                )

    def render(self, highlighted_square=None):
        """
        G·ªçi h√†m v·∫Ω t·ªïng: b√†n c·ªù + qu√¢n c·ªù + highlight
        """
        self.draw_board()
        self.highlight_last_move()
        self.draw_pieces()
        if highlighted_square:
            self.draw_highlights(highlighted_square)
        pygame.display.flip()
    
    def handle_promotion_menu(self, mouse_pos):
        """
        Hi·ªÉn th·ªã menu ch·ªçn qu√¢n khi phong t·ªët (v√† x·ª≠ l√Ω ch·ªçn).
        """
        print("üëë Hi·ªÉn th·ªã menu phong t·ªët...")
        menu_rects = []
        choices = ['q', 'r', 'b', 'n']
        base_x, base_y = 250, 150

        for i, code in enumerate(choices):
            rect = pygame.Rect(base_x, base_y + i * 80, 75, 75)
            print(f"üü¶ V·∫Ω √¥ {code.upper()} t·∫°i {rect}")
            pygame.draw.rect(self.screen, (220, 220, 220), rect)
            pygame.draw.rect(self.screen, (0, 0, 0), rect, 2)
            piece_name = {'q': 'queen', 'r': 'rook', 'b': 'bishop', 'n': 'knight'}[code]
            image = self.piece_images.get(f"white{piece_name}")
            if image:
                self.screen.blit(image, (base_x, base_y + i * 80))
            menu_rects.append((rect, code))

        pygame.display.flip()

        for rect, code in menu_rects:
            if rect.collidepoint(mouse_pos):
                print(f"‚úÖ Click tr√∫ng {code.upper()} ‚Üí ch·ªçn phong")
                return code

        print("‚ùå Click ngo√†i menu phong t·ªët")
        return None


    def draw_promotion_overlay(self):
        """
        V·∫Ω l·∫°i popup phong t·ªët (d√πng khi ƒëang ch·ªù ch·ªçn qu√¢n).
        """
        choices = ['q', 'r', 'b', 'n']
        base_x, base_y = 250, 150

        for i, code in enumerate(choices):
            rect = pygame.Rect(base_x, base_y + i * 80, 75, 75)
            pygame.draw.rect(self.screen, (220, 220, 220), rect)
            pygame.draw.rect(self.screen, (0, 0, 0), rect, 2)
            piece_name = {'q': 'queen', 'r': 'rook', 'b': 'bishop', 'n': 'knight'}[code]
            image = self.piece_images.get(f"white{piece_name}")
            if image:
                self.screen.blit(image, (base_x, base_y + i * 80))

